<ui:composition lang="es" xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
	xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	template="/WEB-INF/templates/template-interno.xhtml">
	<ui:define name="title">#{texto.Estadisticas}</ui:define>
	<ui:define name="head">
		<link
			href="#{sesionManagedBean.contextPath}/resources/css/bootstrap-table.min.css"
			rel="stylesheet" />
		<h:panelGroup
			rendered="#{estadisticasManagedBean.obtenerListaConteoPuzzles().size()>0 and estadisticasManagedBean.idUsuario ne null}">
			<script
				src="#{sesionManagedBean.contextPath}/resources/js/highcharts/highcharts.js"></script>
			<script
				src="#{sesionManagedBean.contextPath}/resources/js/highcharts/highcharts-more.js"></script>
			<script
				src="#{sesionManagedBean.contextPath}/resources/js/highcharts/highcharts-3d.js"></script>
			<script
				src="#{sesionManagedBean.contextPath}/resources/js/highcharts/modules/exporting.js"></script>
			<script
				src="#{sesionManagedBean.contextPath}/resources/js/highcharts/modules/export-data.js"></script>
			<script
				src="#{sesionManagedBean.contextPath}/resources/js/highcharts/modules/accessibility.js"></script>
			<h:panelGroup
				rendered="#{configuracionManagedBean.estiloVisual.valorEntero==1}">
				<script
					src="#{sesionManagedBean.contextPath}/resources/js/highcharts/themes/dark-unica-mod.js"></script>
			</h:panelGroup>
		</h:panelGroup>
	</ui:define>
	<ui:define name="body">
		<div class="col-xs-12">
			<h:form>
				<h:panelGroup>
					<h:outputText value="#{texto.CompararCon}: "></h:outputText>
					<h:selectOneMenu value="#{compararEstadisticasManagedBean.idAmigo}"
						styleClass="form-control input-sm" onchange="submit()"
						valueChangeListener="#{compararEstadisticasManagedBean.cambioAmigo}">
						<f:selectItems
							value="#{compararEstadisticasManagedBean.listaAmigos}"
							var="amigo" itemValue="#{amigo.idUsuario}"
							itemLabel="#{amigo.nombres} #{amigo.apellidos} - #{amigo.correo}"></f:selectItems>
					</h:selectOneMenu>
				</h:panelGroup>
			</h:form>
			<h:panelGroup
				rendered="#{compararEstadisticasManagedBean.idAmigo eq null and compararEstadisticasManagedBean.idUsuario ne null and compararEstadisticasManagedBean.listaAmigos.isEmpty()}">
				<div>#{texto.AunNoTienesAmigos}</div>
			</h:panelGroup>
			<h:panelGroup
				rendered="#{compararEstadisticasManagedBean.idAmigo eq null and compararEstadisticasManagedBean.idUsuario ne null and !compararEstadisticasManagedBean.listaAmigos.isEmpty()}">
				<div>#{texto.PorFavorSeleccionaUnAmigoParaComparar}</div>
			</h:panelGroup>
			<h:panelGroup
				rendered="#{compararEstadisticasManagedBean.idAmigo ne null and compararEstadisticasManagedBean.idUsuario ne null}">
				<div class="col-xs-12">
					<h:panelGroup
						rendered="#{estadisticasManagedBean.obtenerListaConteoPuzzles().size()>0}">
						<br />
						<figure class="highcharts-figure">
							<div id="container" class="col-xs-12 col-md-6 col-lg-7"
								style="height: 400px; margin-bottom: 10px;"></div>
						</figure>
						<figure class="highcharts-figure">
							<div id="containerRendimientos" class="col-xs-12 col-md-6 col-lg-5"
								style="height: 400px; margin-bottom: 10px;"></div>
						</figure>
						<figure class="highcharts-figure">
							<div id="containerPB" class="col-xs-12"
								style="height: 400px; margin-bottom: 10px;"></div>
						</figure>
						<script type="text/javascript">
						Highcharts.chart('container', 
				                   {
                        	chart: {
                                type: 'line'
                            },
                            title: {
                                text: '#{texto.ComparacionDePromedios}'
                            },
                            xAxis: {
                                type: 'datetime',
                                dateTimeLabelFormats: {
                                	day: '%d/%b',
                                    week: '%d/%b',
                                    month: '%d/%b/%Y',
                                    year: '%Y'
                                }
                            },
                            yAxis: {
                                title: {
                                    text: '#{texto.Promedio}'
                                },
                                min: 0,
                                labels: {
                                    formatter: function () {
                                 	   var ms = this.value;
                                        var m=Math.floor(ms/60000);
                                        ms-=(m*60000);
                                        var s=Math.floor(ms/1000);
                                        ms-=(s*1000);
                                        ms=Math.floor(ms/10);
                                        return ((m>9)?m:('0'+m))+':'+((s>9)?s:('0'+s))+'.'+ ((ms>9)?ms:('0'+ms));
                                    }
                                }
                            },
                            legend: {
                                enabled: true
                            },
                            tooltip: {
                            	headerFormat: '&lt;b&gt;{series.name}&lt;/b&gt;&lt;br&gt;',
                            	formatter: function () {
                              	   var ms = this.y;
                                     var m=Math.floor(ms/60000);
                                     ms-=(m*60000);
                                     var s=Math.floor(ms/1000);
                                     ms-=(s*1000);
                                     ms=Math.floor(ms/10);
                                     return "&lt;b&gt;"+((new Date(this.x).getUTCDate()>9)?new Date(this.x).getUTCDate():'0'+new Date(this.x).getUTCDate())
                                     +'/'+(((new Date(this.x).getUTCMonth()+1)>9)?(new Date(this.x).getUTCMonth()+1):'0'+(new Date(this.x).getUTCMonth()+1))
                                     +'/'+(new Date(this.x).getUTCFullYear())+ "&lt;/ b&gt;&lt;br /&gt;" 
                                     +'AVG = '+((m>9)?m:('0'+m))+':'+((s>9)?s:('0'+s))+'.'+ ((ms>9)?ms:('0'+ms));
                                 }
                            },
                            plotOptions: {
                                spline: {
                                    marker: {
                                        enabled: true
                                    }
                                }
                            },
                            series: [#{compararEstadisticasManagedBean.listaPromediosComparacion.obtenerDatos()}]
                        });
						
						Highcharts.chart('containerRendimientos', {
							  chart: {
							    polar: true,
							    type: 'line'
							  },
							  title: {
							    text: '#{compararEstadisticasManagedBean.listaComparacionPB.nombreUsuario} - #{compararEstadisticasManagedBean.listaComparacionPB.nombreAmigo}',
							    x: -80
							  },
							  pane: {
							    size: '80%'
							  },
							  xAxis: {
							    categories: [#{compararEstadisticasManagedBean.listaComparacionPB.obtenerNombreCategorias()}],
							    tickmarkPlacement: 'on',
							    lineWidth: 0
							  },
							  yAxis: {
							    gridLineInterpolation: 'polygon',
							    lineWidth: 0,
							    min: 0
							  },
							  legend: {
							    align: 'right',
							    verticalAlign: 'middle',
							    layout: 'vertical'
							  },
							  series: [{
							    name: '#{compararEstadisticasManagedBean.listaComparacionPB.nombreUsuario}',
							    data: [#{compararEstadisticasManagedBean.listaComparacionPB.obtenerDatosPropios()}],
							    pointPlacement: 'on'
							  }, 
							  {
							    name: '#{compararEstadisticasManagedBean.listaComparacionPB.nombreAmigo}',
							    data: [#{compararEstadisticasManagedBean.listaComparacionPB.obtenerDatosAmigo()}],
							    pointPlacement: 'on'
							  }],
							  responsive: {
							    rules: [{
							      condition: {
							        maxWidth: 500
							      },
							      chartOptions: {
							        legend: {
							          align: 'center',
							          verticalAlign: 'bottom',
							          layout: 'horizontal'
							        },
							        pane: {
							          size: '70%'
							        }
							      }
							    }]
							  }
							});
						
						Highcharts.chart('containerPB', 
				                   {
                     	chart: {
                             type: 'line'
                         },
                         title: {
                             text: 'Historial PB Single'
                         },
                         xAxis: {
                             type: 'datetime',
                             dateTimeLabelFormats: {
                             	day: '%d/%b',
                                 week: '%d/%b',
                                 month: '%d/%b/%Y',
                                 year: '%Y'
                             }
                         },
                         yAxis: {
                             title: {
                                 text: 'Tiempo PB'
                             },
                             min: 0,
                             labels: {
                                 formatter: function () {
                              	   var ms = this.value;
                                     var m=Math.floor(ms/60000);
                                     ms-=(m*60000);
                                     var s=Math.floor(ms/1000);
                                     ms-=(s*1000);
                                     ms=Math.floor(ms/10);
                                     return ((m>9)?m:('0'+m))+':'+((s>9)?s:('0'+s))+'.'+ ((ms>9)?ms:('0'+ms));
                                 }
                             }
                         },
                         legend: {
                             enabled: true
                         },
                         tooltip: {
                         	headerFormat: '&lt;b&gt;{series.name}&lt;/b&gt;&lt;br&gt;',
                         	formatter: function () {
                           	   var ms = this.y;
                                  var m=Math.floor(ms/60000);
                                  ms-=(m*60000);
                                  var s=Math.floor(ms/1000);
                                  ms-=(s*1000);
                                  ms=Math.floor(ms/10);
                                  return "&lt;b&gt;"+((new Date(this.x).getUTCDate()>9)?new Date(this.x).getUTCDate():'0'+new Date(this.x).getUTCDate())
                                  +'/'+(((new Date(this.x).getUTCMonth()+1)>9)?(new Date(this.x).getUTCMonth()+1):'0'+(new Date(this.x).getUTCMonth()+1))
                                  +'/'+(new Date(this.x).getUTCFullYear())+ "&lt;/ b&gt;&lt;br /&gt;" 
                                  +'AVG = '+((m>9)?m:('0'+m))+':'+((s>9)?s:('0'+s))+'.'+ ((ms>9)?ms:('0'+ms));
                              }
                         },
                         plotOptions: {
                             spline: {
                                 marker: {
                                     enabled: true
                                 }
                             }
                         },
                         series: [#{compararEstadisticasManagedBean.listaPBComparacion.obtenerDatos()}]
                     });
            </script>
					</h:panelGroup>
					<h:panelGroup
						rendered="#{estadisticasManagedBean.obtenerListaConteoPuzzles().size()==0}">
						<div>#{texto.AunNoTienesTiemposRegistrados}</div>
					</h:panelGroup>
				</div>
			</h:panelGroup>
		</div>
	</ui:define>
</ui:composition>